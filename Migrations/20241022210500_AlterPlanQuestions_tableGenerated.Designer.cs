// <auto-generated />
using System;
using IAutor.Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IAutor.Api.Migrations
{
    [DbContext(typeof(IAutorDb))]
    [Migration("20241022210500_AlterPlanQuestions_tableGenerated")]
    partial class AlterPlanQuestions_tableGenerated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IAutor.Api.Data.Entities.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DownloadExpirationDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("download_expiration_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("PromotionExpirationDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("promotion_expiration_date");

                    b.Property<decimal?>("PromotionPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("promotion_price");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("cloudinary_public_id");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SaleExpirationDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("sale_expiration_date");

                    b.Property<string>("ThumbImgUrl")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("thumb_img_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("ChapterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Email", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("Book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("timestamp")
                        .HasColumnName("date_sent");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<short?>("EmailType")
                        .HasColumnType("smallint")
                        .HasColumnName("email_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("schedule_date");

                    b.Property<short?>("SendAttempts")
                        .HasColumnType("smallint")
                        .HasColumnName("send_attempts");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("emails", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Income", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateReference")
                        .HasColumnType("date")
                        .HasColumnName("date_reference");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long>("SalesAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("sales_amount");

                    b.Property<decimal>("SumValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("sum_value");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("incomes", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("Book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Bank")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bank");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankAccountType")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bank_account_type");

                    b.Property<string>("BankAg")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bank_ag");

                    b.Property<string>("Cep")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cep");

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cnpj");

                    b.Property<string>("CnpjRespCpf")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cnpj_resp_cpf");

                    b.Property<string>("CnpjRespName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cnpj_rep_name");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("District")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("district");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Instagram")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("instagram");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("IuguAccountId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_account_id");

                    b.Property<bool?>("IuguAccountVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("iugu_account_verified");

                    b.Property<string>("IuguLiveApiToken")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("live_api_token");

                    b.Property<string>("IuguTestApiToken")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("test_api_token");

                    b.Property<string>("IuguUserToken")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("user_token");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PersonType")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("person_type");

                    b.Property<string>("ProfileImgUrl")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("profile_img_url");

                    b.Property<string>("SocialUserName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("social_user_name");

                    b.Property<string>("State")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Telephone")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("telephone");

                    b.Property<string>("TikTok")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tiktok");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Param", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("key");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("params", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("IuguAccountId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_account_id");

                    b.Property<string>("IuguEvent")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_event");

                    b.Property<string>("IuguExternalReference")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_external_reference");

                    b.Property<string>("IuguFaturaId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_fatura_id");

                    b.Property<string>("IuguJsonResult")
                        .HasColumnType("text")
                        .HasColumnName("iugu_json_result");

                    b.Property<string>("IuguOrderId")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_order_id");

                    b.Property<string>("IuguPaidAt")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_paid_at");

                    b.Property<string>("IuguPaidCents")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_paid_cents");

                    b.Property<string>("IuguPayerCpfCnpj")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_payer_cpf_cnpj");

                    b.Property<string>("IuguPaymentMethod")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_payment_method");

                    b.Property<string>("IuguPixEndToEndId")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("iugu_pix_end_to_end_id");

                    b.Property<string>("IuguStatus")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iugu_status");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price_paid");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinalValidityPeriod")
                        .HasColumnType("timestamp")
                        .HasColumnName("final_validity_period");

                    b.Property<DateTime>("InitialValidityPeriod")
                        .HasColumnType("timestamp")
                        .HasColumnName("initial_validity_period");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<short>("MaxLimitSendDataIA")
                        .HasColumnType("smallint")
                        .HasColumnName("max_limit_send_data_IA");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.PlanQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("QuestionId");

                    b.ToTable("plan_question", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint")
                        .HasColumnName("chapter_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<short>("MaxLimitCharacters")
                        .HasColumnType("smallint")
                        .HasColumnName("max_limit_characters");

                    b.Property<short>("MinLimitCharacters")
                        .HasColumnType("smallint")
                        .HasColumnName("min_limit_characters");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("themes", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActivationAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("activation_at");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("activation_code");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfileImgUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("ResetPassword")
                        .HasColumnType("boolean")
                        .HasColumnName("reset_password");

                    b.Property<DateTime?>("ResetPasswordAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("reset_password_at");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("reset_password_code");

                    b.Property<string>("SignInWith")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("sign_in_with");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.UserBookLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("Book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("log");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("user_book_logs", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.UserLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("log");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_logs", (string)null);
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Email", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Book", "Book")
                        .WithMany("Emails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IAutor.Api.Data.Entities.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Income", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Owner", "Owner")
                        .WithMany("Incomes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Order", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IAutor.Api.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Owner", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.User", "User")
                        .WithOne("Owner")
                        .HasForeignKey("IAutor.Api.Data.Entities.Owner", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Payment", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.PlanQuestion", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Plan", "Plan")
                        .WithMany("PlansQuestions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IAutor.Api.Data.Entities.Question", "Question")
                        .WithMany("PlansQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Question", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.UserBookLog", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.Book", "Book")
                        .WithMany("UserBookLogs")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IAutor.Api.Data.Entities.User", "User")
                        .WithMany("UserBookLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.UserLog", b =>
                {
                    b.HasOne("IAutor.Api.Data.Entities.User", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Book", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Orders");

                    b.Navigation("UserBookLogs");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Chapter", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Owner", b =>
                {
                    b.Navigation("Incomes");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Plan", b =>
                {
                    b.Navigation("PlansQuestions");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.Question", b =>
                {
                    b.Navigation("PlansQuestions");
                });

            modelBuilder.Entity("IAutor.Api.Data.Entities.User", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Orders");

                    b.Navigation("Owner");

                    b.Navigation("UserBookLogs");

                    b.Navigation("UserLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
